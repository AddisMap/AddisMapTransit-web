_id: en-US
_name: English

# This file contains localized strings (a.k.a. messages) for the language indicated above:
#   - Messages are organized in various categories and sub-categories.
#   - A component or JS module can use messages from one or more categories.
#   - In the code, messages are retrieved using an ID that is simply the path to the message.
#     Use the dot '.' to separate categories and sub-categories in the path.
#     For instance, for the message defined in YML below:
#         common
#           otpTransitModes
#             subway: Metro#
#     then use the snippet below with the corresponding message id:
#         <FormattedMessage id='common.otpTransitModes.subway' /> // renders "Metro".
#
# It is important that message ids in the code be consistent with
# the categories in this file. Below are some general guidelines:
#   - For starters, there is a 'components' category and a 'common' category.
#     Additional categories may be added as needed.
#   - Each sub-category under 'components' denotes a component and
#     should contain messages that are used only by that component (e.g. button captions).
#   - In contrast, some strings are common to multiple components,
#     so it makes sense to group them by theme (e.g. accessModes) under the 'common' category.


# Component-specific messages (e.g. button captions)
# are defined for each component under the 'components' category.
components:
  DefaultItinerary:
    clickDetails: Click to view details
    # Use ordered placeholders when multiple modes are involved
    # (this will accommodate right-to-left languages by swapping the order/separator in this string).
    multiModeSummary: "{accessMode} to {transitMode}"
  ItinerarySummary:
    calories: Cal
    fareCost: "{useMaxFare, select {
      true {{minTotalFare} - {maxTotalFare}}
      false {{minTotalFare}}
    }}"
    transfers: "{transfers} {transfers, plural, =0 {Transfer} other {Transfers}"
  RealtimeAnnotation:
    ignoreServiceDelays: Apply service delays
    delaysNotShownInResults: "Your trip results are currently being affected by service delays.
      These delays do not factor into travel times shown below."
    delaysShownInResults: "Your trip results have been adjusted based on real-time
      information. Under normal conditions, this trip would take <b>{normalDuration}</b>
      using the following routes: {routes}."
    ignoreServiceDelays: Ignore service delays
    serviceUpdate: Service update
  SaveTripButton:
    cantSaveText: Cannot save
    cantSaveTooltip: Only itineraries that include transit and no rentals or ride hailing can be monitored.
    saveTripText: Save trip
    signInText: Sign in to save trip
    signInTooltip: Please sign in to save trip.
  SimpleRealtimeAnnotation:
    usingRealtimeInfo: This trip uses real-time traffic and delay information
  TripTools:
    copyLink: Copy link
    # Text that replaces the copyLink button text after user clicks it.
    linkCopied: Copied
    print: Print
    reportIssue: Report Issue
    reportEmailSubject: Reporting an Issue with OpenTripPlanner
    reportEmailTemplate: "                       *** INSTRUCTIONS TO USER ***
      This feature allows you to email a report to site administrators for review.
      Please add any additional feedback for this trip under the 'Additional Comments'
      section below and send using your regular email program."
    startOver: Start Over # TODO: move to other category (common with hamburger 'Start Over' item)

# Common messages that appear in multiple components and modules
# are grouped below by topic.
common:
  # OTP access modes
  accessModes:
    bike: Bike
    bikeshare: Bikeshare
    drive: Drive
    micromobility: E-Scooter
    micromobilityRent: Rental E-Scooter
    walk: Walk 

  # OTP transit modes
  # Note that identifiers are OTP modes converted to lowercase.
  otpTransitModes:
    tram: Streetcar
    subway: Subway
    rail: Rail
    bus: Bus
    ferry: Ferry
    # The original OTP mode id is CABLE_CAR. Lowercase makes it cable_car.
    cable_car: Cable Car
    gondola: Gondola
    funicular: Funicular

  time:
     # Use ordered placeholders for the departure-arrival string
    # (this will accommodate right-to-left languages by swapping the order in this string).
    departureArrivalTimes: "{startTime}â€”{endTime}"
    # If trip is less than one hour only display the minutes.
    tripDurationFormatZeroHours: "{minutes, number} min"
    # TODO: Distinguish between one hour (singular) and 2 hours or more?
    tripDurationFormat: "{hours, plural, 
        =0 {{minutes, number} min}
        other {{hours, number} hr {minutes, number} min}}"
      